/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.swagger:swagger-codegen:3.0.0-rc0')
    }
}

plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'maven-publish'
    id 'signing'
    id 'com.github.spotbugs' version '4.5.1'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.3.72'
}

description = "Chronicle REST APIs"
group = "com.openlattice"
ext.projectName = 'chronicle-api'
ext.scmUrl = 'scm:git:https://github.com/openlattice/chronicle-api.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/chronicle-api.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/chronicle-api.git'

apply from: "https://raw.githubusercontent.com/openlattice/openlattice/fix/build/gradles/openlattice.gradle"

// Still on java 8 as a compile target for android
sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += '-Xjvm-default=compatibility'
    }
}

jacoco {
    toolVersion = "0.8.2"
}

checkstyle {
    toolVersion = '7.4'
    config project.resources.text.fromUri('https://raw.githubusercontent.com/openlattice/openlattice/develop/gradles/checkstyle.xml')
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
    reportLevel = 'high'
    toolVersion = "${spotbugs_annotations_version}"
}

spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

//TODO: Once Swagger 3.0 has working OpenAPI support finish wiring all this in.

import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

def swaggerInput = "chronicle.yaml"
def swaggerOutputDir = file('build/swagger')
task swaggerDocs {
    inputs.file(swaggerInput)
    outputs.dir(swaggerOutputDir)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerOutputDir.path)
        config.setLang('java')
        config.setAdditionalProperties([
                'dateLibrary': 'java8'
        ])
//        config.setImportMappings([
//                'Dog': 'io.swagger.petstore.client.model.Dog'
//        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task swaggerJava {
    inputs.file(swaggerInput)
    outputs.dir(swaggerOutputDir)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerOutputDir.path)
        config.setLang('java')
        config.setAdditionalProperties([
                'dateLibrary': 'java8'
        ])
        config.setImportMappings([
                'Dog': 'io.swagger.petstore.client.model.Dog'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

clean.doFirst {
    delete(swaggerOutputDir)
}

ext.jackson_version = '2.6.5'

dependencies {
  spotbugsPlugins "com.h3xstream.findsecbugs:findsecbugs-plugin:${findsecbugs_version}"
    compileOnly "net.jcip:jcip-annotations:${jcip_version}"
    compileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"
    testCompileOnly "net.jcip:jcip-annotations:${jcip_version}"
    testCompileOnly "com.github.spotbugs:spotbugs-annotations:${spotbugs_annotations_version}"

    compile group: "org.slf4j", name: "slf4j-api", version: "${slf4j_version}"

    compile "com.squareup.retrofit2:retrofit:${retrofit2_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    compile "org.apache.commons:commons-lang3:${commonsLang_version}"
    compile "commons-io:commons-io:${commonsio_version}"
    compile 'com.google.guava:guava:22.0-android'

    compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"
    compile ("com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}") {
        exclude module: 'guava'
    }

    compile "org.apache.olingo:odata-server-api:${odata_version}"
    compile "org.apache.olingo:odata-server-core:${odata_version}"
    compile "org.apache.olingo:odata-commons-api:${odata_version}"
    compile "org.apache.olingo:odata-commons-core:${odata_version}"

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"

    testImplementation "junit:junit:${junit_version}"

    /*
     * TESTING
     */
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j_version}"
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j_version}"
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j_version}"
    testImplementation group: 'org.apache.logging.log4j', name: 'log4j-web', version: "${log4j_version}"
    testImplementation("org.mockito:mockito-all:${mockito_version}") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
}

install {
    configuration = configurations.published
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true

// Still on java 8 as a compile target for android
    ext.sourceCompatibility = JavaVersion.VERSION_1_8
}
