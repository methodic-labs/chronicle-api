buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath('io.swagger:swagger-codegen:3.0.0-rc0')
    }
}

plugins {
    id 'java'
    id "org.jetbrains.kotlin.jvm" version "1.2.30"
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'findbugs'
}

description = "Chronicle REST APIs"
group = "com.openlattice"
ext.projectName = 'chronicle-api'
ext.scmUrl = 'scm:git:https://github.com/openlattice/chronicle-api.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/chronicle-api.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/chronicle-api.git'

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"
apply plugin: 'kotlin'

sourceCompatibility = JavaVersion.VERSION_1_8

def versions = [
        checkstyle: '7.4',
]

checkstyle {
    toolVersion = "${versions.checkstyle}"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

//TODO: Once Swagger 3.0 has working OpenAPI support finish wiring all this in.

import io.swagger.codegen.DefaultGenerator
import io.swagger.codegen.config.CodegenConfigurator

def swaggerInput = "openlattice.yaml"
def swaggerOutputDir = file('build/swagger')
task swaggerDocs {
    inputs.file(swaggerInput)
    outputs.dir(swaggerOutputDir)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerOutputDir.path)
        config.setLang('java')
        config.setAdditionalProperties([
                'dateLibrary'   : 'java8'
        ])
//        config.setImportMappings([
//                'Dog': 'io.swagger.petstore.client.model.Dog'
//        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}

task swaggerJava {
    inputs.file(swaggerInput)
    outputs.dir(swaggerOutputDir)
    doLast {
        def config = new CodegenConfigurator()
        config.setInputSpec(swaggerInput)
        config.setOutputDir(swaggerOutputDir.path)
        config.setLang('java')
        config.setAdditionalProperties([
                'dateLibrary'   : 'java8'
        ])
        config.setImportMappings([
                'Dog': 'io.swagger.petstore.client.model.Dog'
        ])
        new DefaultGenerator().opts(config.toClientOptInput()).generate()
    }
}



clean.doFirst {
    delete(swaggerOutputDir)
}

dependencies {
    /*
     * SL4J
     */
    compile group: "org.slf4j", name: "slf4j-api", version: "${slf4j_version}"

    /*
     * @Inject and @Nullable support
     */
    compile "javax.inject:javax.inject:${javax_inject_version}"

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    compile 'com.esotericsoftware:kryo-shaded:4.0.0'
    compile 'com.esotericsoftware:minlog:1.3.0'
    compile 'com.esotericsoftware:reflectasm:1.11.3'
    compile 'org.objenesis:objenesis:2.4'
    compile 'de.javakaffee:kryo-serializers:0.42'

    compile "org.apache.commons:commons-lang3:${commonsLang_version}"
    compile "commons-io:commons-io:${commonsio_version}"

    compile "com.google.guava:guava:${guava_version}"
    compile "org.apache.olingo:odata-commons-api:${odata_version}"
    compile "org.apache.olingo:odata-commons-core:${odata_version}"
    compile "org.apache.olingo:odata-server-api:${odata_version}"
    compile "org.apache.olingo:odata-server-core:${odata_version}"

    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: "${cassandra_driver_version}"
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-extras', version: "${cassandra_driver_version}"
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-mapping', version: "${cassandra_driver_version}"
    compile "org.xerial.snappy:snappy-java:${snappy_version}"
    compile "net.jpountz.lz4:lz4:${lz4_version}"
    compile "com.squareup.retrofit2:retrofit:${retrofit2_version}"

    /*
     * JACKSON SERIALIZATION
     * YAML via SnakeYaml
     * Afterburner for faster serialization
     * Guava integration
     * Smile for binary serialization
     * Jersey integration
     * Jaxb annotation support
     */
    compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:${jackson_version}"
    compile "org.yaml:snakeyaml:${snakeyaml_version}"
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"

    if (project.hasProperty('developmentMode') && project.developmentMode) {
        logger.quiet(project.name + " using project dependencies.")
        compile(project(path: ":rhizome-client"))
        testCompile(project(path: ":rhizome-client", configuration: "tests"))
        testCompile(project(path: ":rhizome", configuration: "tests"))
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.openlattice:rhizome-client:${rhizome_client_version}"
        testCompile "com.openlattice:rhizome:${rhizome_version}:tests"
        testCompile "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    /*
     * TESTING
     */
    testCompile "junit:junit:${junit_version}"
    testCompile("org.mockito:mockito-all:${mockito_version}") {
        exclude module: 'hamcrest'
        exclude module: 'hamcrest-core'
    }
}

install {
    configuration = configurations.published
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility = JavaVersion.VERSION_1_8
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
